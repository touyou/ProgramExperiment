(define btree-top cadr)
(define btree-left car)
(define btree-right caddr)
(define (btree-empty) (list))
(define btree-null? null?)

(define (btree-insert key val t)
  (if (btree-null? t)
    (list (btree-empty) (list key val) (btree-empty))
    (let ((top (btree-top t))
        (pkey (car (btree-top t)))
        (left (btree-left t))
        (right (btree-right t)))
            (cond ((string=? pkey key) (list left (list key val) right))
                    ((string>? pkey key) (list (btree-insert key val left) top right))
                    (else (list left top (btree-insert key val right)))))))

(define (btree-delete key t)
  (if (btree-null? t)
  t
  (let ((top (btree-top t))
      (pkey (car (btree-top t)))
      (left (btree-left t))
      (right (btree-right t)))
      (cond ((string=? pkey key) (list (merge-btree left (btree-left right)) (btree-top right) (btree-right right)))
            ((string>? pkey key) (btree-delete key left))
            (else (btree-delete key right))))))

(define (merge-btree t acc)
    (if (null? acc)
        t
        (let ((key (car (car acc))) (value (cdr (car acc))))
            (merge-btree (btree-insert key value t) (cdr acc)))
    )
)

(define (btree-search key t)
  (if (btree-null? t)
  #f
  (let ((top (btree-top t))
      (pkey (car (btree-top t)))
      (left (btree-left t))
      (right (btree-right t)))
      (cond
        ((string=? pkey key) top)
        ((string>? pkey key) (btree-search key left))
        (else (btree-search key right))
  ))))


(let ((t (btree-empty)))
  (define (input->string x)
    (cond
     ((symbol? x) (symbol->string x))
     ((number? x) (number->string x))
     ((string? x) x)
     (else #f)))
  (define (main-loop t)
    (let ((cmd (read)))
      (cond
       ((equal? cmd 'insert)
        (let* ((key (input->string (read)))
               (val (input->string (read))))
          (main-loop (btree-insert key val t))))
       ((equal? cmd 'delete)
        (let* ((key (input->string (read))))
          (main-loop (btree-delete key t))))
       ((equal? cmd 'search)
        (let* ((key (input->string (read)))
               (entry (btree-search key t)))
          (if (not entry)
              (display "(not found)\n")
              (begin
                (display (cdr entry))
                (newline)))
          (main-loop t)))
       ((or (equal? cmd 'quit) (eof-object? cmd))
        #t)
       (else
        (display "(unknown command)\n")
        (main-loop t)))))
  (main-loop t))
