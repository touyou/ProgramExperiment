(define btree-top cadr)
(define btree-left car)
(define btree-right caddr)
(define (btree-empty) (list))
(define btree-null? null?)

(define (btree-insert key val t)
  (if (btree-null? t)
    (list (btree-empty) (cons key val) (btree-empty))
    (let ((top (btree-top t))
        (pkey (car (btree-top t)))
        (left (btree-left t))
        (right (btree-right t)))
            (cond ((string=? pkey key) (list left (cons key val) right))
                    ((string>? pkey key) (list (btree-insert key val left) top right))
                    (else (list left top (btree-insert key val right)))))))

(define (btree-delete key t)
  (if (btree-null? t)
  t
  (let ((top (btree-top t))
      (pkey (car (btree-top t)))
      (left (btree-left t))
      (right (btree-right t)))
      (cond ((string=? pkey key) (list (merge-btree left (btree-left right)) (btree-top right) (btree-right right)))
            ((string>? pkey key) (btree-delete key left))
            (else (btree-delete key right))))))

(define (merge-btree t acc)
    (if (btree-null? acc)
        t
        (let ((top (btree-top acc))
            (key (car (btree-top acc)))
            (value (cdr (btree-top acc)))
            (left (btree-left acc))
            (right (btree-right acc)))
            (let ((new-tree (btree-insert key value t)))
                (merge-btree (merge-btree new-tree left) right)
            ))))

(define (btree-search key t)
  (if (btree-null? t)
  #f
  (let ((top (btree-top t))
      (pkey (car (btree-top t)))
      (left (btree-left t))
      (right (btree-right t)))
      (cond
        ((string=? pkey key) top)
        ((string>? pkey key) (btree-search key left))
        (else (btree-search key right))
  ))))
