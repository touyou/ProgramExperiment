まずこのコードをproblem105b.sとして保存した。


	.global prime_factor
prime_factor:
	# 2から順に割っていく
	# 最初に一旦引数を避難する
	mr %r4, %r3
	# %r3をループ変数にする（ループを抜けた時に同時に返り値にもなる）
	li %r3, 2
loop:
	# %r4を%r3で割り切れるならそれが答え
	divw %r5, %r4, %r3
	mullw %r5, %r5, %r3
	cmpw %r5, %r4
	beq ret
	# %r3を1増やしてloopのところに戻る
	addi %r3, %r3, 1
	b loop
ret:
	# この時点で%r3が答えになっているからそのままreturn
	blr

テスト用に以下のコードをproblem105b.cとして保存した。


#include <stdio.h>
#include <stdlib.h>

int prime_factor(int n);

const int test[][2] = {
    {6, 2},
    {299, 13},
    {307, 307}
};

int main() {
    int i;
    for (i=0; i<(int)(sizeof(test)/sizeof(*test)); i++) {
        int res = prime_factor(test[i][0]);
        printf("prime_factor(%d) == %d\n",test[i][0],res);
        if (res == test[i][1]) puts("ok");
        else puts("ng");
    }
    return 0;
}

これを以下のようにコンパイルして実行した。

g020@ubuntu-power1:~/asprac$ gcc -Wall problem105b.c problem105b.s -o problem105
g020@ubuntu-power1:~/asprac$ ./problem105
prime_factor(6) == 2
ok
prime_factor(299) == 13
ok
prime_factor(307) == 307
ok
