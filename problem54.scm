(define (rational a b)
 (cons a b)
)
(define (rat-num r)
 (let ((a (car r)) (b (cdr r)))
  (/ a (gcd a b))
 )
)
(define (rat-denom r)
 (let ((a (car r)) (b (cdr r)))
  (/ b (gcd a b))
 )
)
(define (rat-= r1 r2)
 (and (equal? (rat-num r1) (rat-num r2)) (equal? (rat-denom r1) (rat-denom r2)))
)
(define rat-0
 (rational 0 1)
)
(define (mylcm a b)
 (/ (* a b) (gcd a b))
)
(define (rat-+ r1 r2)
 (let ((a (rat-num r1))
       (b (rat-denom r1))
       (c (rat-num r2))
       (d (rat-denom r2)))
  (rational
   (+ (* a (/ (mylcm b d) b)) (* c (/ (mylcm b d) d)))
   (mylcm b d)
  )
 )
)
(define (rat-- r)
 (rational (- 0 (rat-num r)) (rat-denom r))
)
(define rat-1
 (rational 1 1)
)
(define (rat-* r1 r2)
 (rational
  (* (rat-num r1) (rat-num r2))
  (* (rat-denom r1) (rat-denom r2))
 )
)
(define (rat-/ r)
 (rational (cdr r) (car r))
)
